using namespace std;
/*Collision Pac / Fantome 

Fonction bool  bool(collision ou non)
Paramètres :
- Struct de Pacman (contient PacPos, PacSize)
- Map des Sprites Fantomes (contient struct Fantome qui contient FantomePos, FantomeSize)
- 
*/

/**
 * @brief Détermine si la coordonnée XPointFantome du possible point de collision se trouve dans de l'intervalle la "HitBox" du PacMan
 * @param[in] XCenterPac : La coordonnée x du centre du PacMan et par extension sa HitBox
 * @param[in] XPointFantome : La coordonnée x d'un point d'extémité du Fantome et par extension le carré contenant sa HitBox
*/
bool xFInsideHitBoxPacX (const unsigned & XCenterPac, const unsigned XPointFantome, const unsigned SizePac) {
    if ((XCenterPac - SizePac) <= XPointFantome && (XCenterPac + SizePac) >= XPointFantome)
        return true;
    else
        return false;
}

bool yFInsideHitBoxPacY (const unsigned & YCenterPac, const unsigned YPointFantome, const unsigned SizePac,const unsigned & XCenterPac, const unsigned XPointFantome) {
    unsigned valAbsDiffXPacFantome;
    if (XCenterPac < XPointFantome)
        valAbsDiffXPacFantome = XPointFantome - XCenterPac;
    else
        valAbsDiffXPacFantome = XCenterPac - XPointFantome
    
    if ((YCenterPac - SizePac/2) - (SizePac - valAbsDiffXPacFantome) <= YPointFantome && (YCenterPac + SizePac/2) + (SizePac - valAbsDiffXPacFantome) <= YPointFantome)
        return true;
    else
        return false;
}

bool CollisionPacGhost (const PacMan & Pac, map <unsigned, GhostSprite> & MapGhost){
    for (pair <unsigned, GhostSprite> & Fantome : MapGhost){
        unsigned xMaxGhost = Fantome.second.CenterPos.first + Fantome.second.Size
        if (xFInsideHitBoxPacX(PacMan.CenterPos.first, xMaxGhost, PacMan.Size) == true)
        {
            unsigned yMaxGhost = Fantome.second.CenterPos.second + Fantome.second.Size
            if ()
                yFInsideHitBoxPacY(PacMan.CenterPos.second, yMinGhost, PacMan.Size, PacMan.CenterPos.first, xMaxGhost) == true
                return true
        }
    }
     
}
