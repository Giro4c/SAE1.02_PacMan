using namespace std;
/*Collision Pac / Fantome 

Fonction bool  bool(collision ou non)
Paramètres :
- Struct de Pacman (contient PacPos, PacSize)
- Map des Sprites Fantomes (contient struct Fantome qui contient FantomePos, FantomeSize)
- 
*/

/**
 * @brief Détermine si la coordonnée XPointFantome du possible point de collision se trouve dans de l'intervalle d'abscisse de la "HitBox" du PacMan. CAD, entre les coordonnées x des extrémités droites et gauches.
 * @param[in] XCenterPac : La coordonnée x du centre du PacMan et par extension sa HitBox
 * @param[in] XPointFantome : La coordonnée x d'un point d'extémité du Fantome et par extension le carré contenant sa HitBox
 * @param[in] SizePac : Le rayon du cercle qui compose le PacMan
 * @fn xFInsideHitBoxPacX (const unsigned & XCenterPac, const unsigned XPointFantome, const unsigned SizePac);
*/
bool xFInsideHitBoxPacX (const unsigned & XCenterPac, const unsigned XPointFantome, const unsigned SizePac) {
    if ((XCenterPac - SizePac) <= XPointFantome && (XCenterPac + SizePac) >= XPointFantome)
        return true;
    else
        return false;
}

/**
 * @brief Détermine si la coordonnée YPointFantome du possible point de collision se trouve dans de l'intervalle d'ordonnée de la "HitBox" du PacMan en fonction de la coordonnée x du point en question. CAD, entre les coordonnées y des extrémités droites et gauches.
 * @param[in] YCenterPac : La coordonnée x du centre du PacMan et par extension sa HitBox
 * @param[in] YPointFantome : La coordonnée x d'un point d'extémité du Fantome et par extension le carré contenant sa HitBox
 * @param[in] SizePac : Le rayon du cercle qui compose les PacMan
 * @param[in] XCenterPac : La coordonnée x du centre du PacMan et par extension sa HitBox
 * @param[in] XPointFantome : La coordonnée x d'un point d'extémité du Fantome et par extension le carré contenant sa HitBox
 * @fn yFInsideHitBoxPacY (const unsigned & YCenterPac, const unsigned YPointFantome, const unsigned SizePac,const unsigned & XCenterPac, const unsigned XPointFantome);
*/
bool yFInsideHitBoxPacY (const unsigned & YCenterPac, const unsigned YPointFantome, const unsigned SizePac,const unsigned & XCenterPac, const unsigned XPointFantome) {
    
    if ((YCenterPac - SizePac) <= YPointFantome && (YCenterPac + SizePac) >= YPointFantome){ // Cette condition empeche que y sortent de la HitBox
        unsigned valAbsDiffXPacFantome;
        if (XCenterPac < XPointFantome)
            valAbsDiffXPacFantome = XPointFantome - XCenterPac;
        else
            valAbsDiffXPacFantome = XCenterPac - XPointFantome
        
        if ((YCenterPac - SizePac/2) - (SizePac - valAbsDiffXPacFantome) <= YPointFantome && (YCenterPac + SizePac/2) + (SizePac - valAbsDiffXPacFantome) >= YPointFantome)
            return true;
        else
            return false;
    }
    
}

/**
 * @brief Détermine s'il y a réel contact entre la hitbox PacMan et celle (complexe) du Fantome pour sa partie supérieure
 * @param[in] Pac : La struct contenant toutes les caractéristiques physiques du PacMan
 * @param[in] xGFirstContact : La coordonnée x du point de collision détecté de la HitBox simple (carrée) du Ghost
 * @param[in] XGFirstContact : La coordonnée y du point de collision détecté de la HitBox simple (carrée) du Ghost
 * @param[in] Ghost : La struct contenant toutes les caractéristiques du Ghost
 * @fn RealHitGhost (const PacMan & Pac, const unsigned & xGFirstContact, const unsigned & yGFirstContact, const GhostSprite & Ghost);
*/
bool RealHitGhost (const PacMan & Pac, const unsigned & xGFirstContact, const unsigned & yGFirstContact, const GhostSprite & Ghost){
    if (xFInsideHitBoxPacX(Pac.CenterPos.first, xGFirstContact + (Ghost.Size /2), Pac.Size) == true || xFInsideHitBoxPacX(Pac.CenterPos.first, xGFirstContact + (Ghost.Size /2), Pac.Size) == true)
        return true;
    else if (yFInsideHitBoxPacY(Pac.CenterPos.second, yGFirstContact, Pac.Size, Pac.CenterPos.first, xGFirstContact) == true)
        return true;
    else 
        return false;
}

/**
 * @brief Détermine s'il y a collision entre PacMan et un des Ghost
 * @param[in] Pac : La struct contenant toutes les caractéristiques physiques du PacMan
 * @param[in] MapGhost : La map contennant toutes les variables GhostSprite associées à chacun des Ghost d'une partie
 * @fn CollisionPacGhost (const PacMan & Pac, const map <unsigned, GhostSprite> & MapGhost);
*/
bool CollisionPacGhost (const PacMan & Pac, const map <unsigned, GhostSprite> & MapGhost){
    /* Si un Ghost n'as pas de collision avec PacMan, la fonction ne renvoie pas false immédiatement : cette valeur n'est envoyée seulement si AUCUN n'a de collision d'où le renvoie false APRES la boucle for*/
    for (pair <unsigned, GhostSprite> & Fantome : MapGhost){
        
        // Avec xMax 
        unsigned xMaxGhost = Fantome.second.CenterPos.first + Fantome.second.Size;
        if (xFInsideHitBoxPacX(Pac.CenterPos.first, xMaxGhost, Pac.Size) == true)
        {
            // yMax
            unsigned yMaxGhost = Fantome.second.CenterPos.second + Fantome.second.Size;
            if (yFInsideHitBoxPacY(Pac.CenterPos.second, yMaxGhost, Pac.Size, Pac.CenterPos.first, xMaxGhost) == true) 
                return true;
            // yMin
            else{
                unsigned yMinGhost = Fantome.second.CenterPos.second - Fantome.second.Size;
                if (yFInsideHitBoxPacY(Pac.CenterPos.second, yMinGhost, Pac.Size, Pac.CenterPos.first, xMaxGhost) == true && RealHitGhost(Pac, xMaxGhost, yMinGhost, Fantome.second.Size))
                    return true;
                else 
                    continue;
            }
        }

        // Avec xMin
        else 
        {
            unsigned xMinGhost = Fantome.second.CenterPos.first - Fantome.second.Size;
            if (xFInsideHitBoxPacX(Pac.CenterPos.first, xMinGhost, Pac.Size) == true)
                {
                unsigned yMaxGhost = Fantome.second.CenterPos.second + Fantome.second.Size;
                if (yFInsideHitBoxPacY(Pac.CenterPos.second, yMaxGhost, Pac.Size, Pac.CenterPos.first, xMinGhost) == true) 
                    return true;
                else{
                    unsigned yMinGhost = Fantome.second.CenterPos.second - Fantome.second.Size;
                    if (yFInsideHitBoxPacY(Pac.CenterPos.second, yMinGhost, Pac.Size, Pac.CenterPos.first, xMinGhost) == true && RealHitGhost(Pac, xMinGhost, yMinGhost, Fantome.second.Size))
                        return true;
                    else
                        continue;
                }
            }
            else 
                continue;
        }
    }
     
}
