using namespace std;
// Collision Pac / BP

/*Procedure modifie map contenant une partie des données de MapBP (Toutes les BP suceptibles d'être percutées) en fonction de la directionPac
Paramètres :
- Map 
- Map PossibleCollision_BP
- directionPac */
/**
 * @brief Procédure qui construit la map des BP sur la trajectoire du pacman en fonction de la direction
 * @param[in] Pac : 
 * @param[in] Parameters : 
 * @param[in] MapBP : 
 * @param[in|out] MapBPPossible : Map contenant les BP sur la trajectoire du pacman
 * @fn void CollisionBPPossible (const PacMan & Pac, const CMyParam & Parameters, const map<nsGraphics::Vec2D, bool> & MapBP, map<nsGraphics::Vec2D, bool> & MapBPPossible);
*/
void CollisionBPPossible (const PacMan & Pac, const map<nsGraphics::Vec2D, bool> & MapBP, const CMyParam & Parameters, map<nsGraphics::Vec2D, bool> & MapBPPossible)
{
    if (Pac.DirectionPrev != Pac.DirectionActuelle){ // Evite d'avoir à tout reconstruire à chaque appel de la procedure
        MapBPPossible.erase(MapBPPossible.begin(), MapBPPossible.end());
        taillePac = Pac.Size;
        // Trajectoire Verticale
        if (Pac.DirectionActuelle == MapParamStrPac.find("TurnUp")->second){
            for (pair <nsGraphics::Vec2D, bool> & BP : MapBP ){
                if (BP.first.getY() <= Pac.CenterPos.getY()){
                    if (Pac.CenterPos.getX() - taillePac <= BP.first.getX() && BP.first.getX() <= Pac.CenterPos.getX() + taillePac)
                        MapBPPossible[BP.first] = BP.second;
                }
            }
        }
        else if (Pac.DirectionActuelle == MapParamStrPac.find("TurnDown")->second){
            for (pair <nsGraphics::Vec2D, bool> & BP : MapBP ){
                if (BP.first.getY() >= Pac.CenterPos.getY()){
                    if (Pac.CenterPos.getX() - taillePac <= BP.first.getX() && BP.first.getX() <= Pac.CenterPos.getX() + taillePac)
                        MapBPPossible[BP.first] = BP.second;
                }
            }
        }
        // Ligne allignée avec le pacman
        else if (Pac.DirectionActuelle == MapParamStrPac.find("TurnLeft")->second){
            for (pair <nsGraphics::Vec2D, bool> & BP : MapBP ){
                if (BP.first.getX() <= Pac.CenterPos.getX()){
                    if (Pac.CenterPos.getY() - taillePac <= BP.first.getY() && BP.first.getY() <= Pac.CenterPos.getY() + taillePac)
                        MapBPPossible[BP.first] = BP.second;
                }
            }
        }
        else if (Pac.DirectionActuelle == MapParamStrPac.find("TurnRight")->second){
            for (pair <nsGraphics::Vec2D, bool> & BP : MapBP ){
                if (BP.first.getX() >= Pac.CenterPos.getX()){
                    if (Pac.CenterPos.getY() - taillePac <= BP.first.getY() && BP.first.getY() <= Pac.CenterPos.getY() + taillePac)
                        MapBPPossible[BP.first] = BP.second;
                }
            }
        }
    }
}

map <nsGraphics::Vec2D, bool> MapBPPossible;

    if (timer < 3min || ResteBP == 0)
        FinPartie = true;
    
    
    if (timelapse > 1 sec)
        combo = 0;

    if (CollisionPacFantome())

    // Avant appel collPacBP
    CollisionBPPossible(Pac, Parameters, MapBP, MapBPPossible);
    
    if (CollisionPacBP().first == true){
        // Modif des Map BP
        MapBP.find[CollisionBPPossible().first] = true;
        MapBPPossible.find[CollisionBPPossible().first] = true;

        // Actions et modifs des autres variables
        ++combo;
        --ResteBP;
        Score = Score + 100*(1 + ((Combo - 1)* 0.01));
        timelapse.reset();
    }

/**
 * @brief Renvoie Vrai et les coordonnées du centre de la Boule Point s'il y a collision entre pacman et une BP
 * @param[in] Pac :
 * @param[in] Parameters : 
 * @param[in] MapBPPossible : 
 * @fn pair <bool, nsGraphics::Vec2D> CollisionPacBP (const PacMan & Pac, const CMyParam & Parameters, const map <nsGraphics::Vec2D, bool> & MapBPPossible);
*/
pair <bool, nsGraphics::Vec2D> CollisionPacBP (const PacMan & Pac, const CMyParam & Parameters, const map <nsGraphics::Vec2D, bool> & MapBPPossible)
{
    tailleBP = Parameters.MapParamUnsigned.find("BPSize")->second;
    for (auto & BPPossible : MapBPPossible){
        if (BPPossible == true){
            if (Pac.CenterPos.isColliding(nsGraphics::Vec2D((BPPossible.first.getX() - tailleBP), (BPPossible.first.getY() - tailleBP)), nsGraphics::Vec2D((BPPossible.first.getX() + tailleBP), (BPPossible.first.getY() + tailleBP))) == true)
                return {true, BPPossible.first};
        }
    }
}

//    si timelapse > 3 second
//        combo = 0
//    Peut sera effectué après verif
    unsigned numberExtremityPac
    unsigned numberExtremityBP_Min
    unsigned numberExtremityBP_Max
    bool collisionPacBP (numberExtremityPac <= numberExtremityBP_Max && numberExtremityPac >= numberExtremityBP_Min)
    for (<nsGraphics::Vec2D, bool> & BP_Possible : Map_PossibleCollision_BP)
        // En fonction direction
        if (Pac.directionPac == Pac.GoUp) 
            numberExtremityPac = Pac.CenterPos.second - Pac.Size
            numberExtremityBP_Min = BP_Possible.first.second - BP.Size
            numberExtremityBP_Max = BP_Possible.first.second + BP.Size
            /* Explications :
            PacMan se dirige vers le haut donc la ligne de collision aura pour coordonnée y = PacCo y min (car fenetre haut=0 et bas=max) Soit la droite horizontale passant par le "point" le plus haut de PacMan. 
            Sachant que la vitesse est suceptible de changer durant une partie, on détermine qu'une collision a lieu lorsque le PointMax est dans l'intervalle compris entre les Y des PointMax et PointMin d'une BP de la map des BP avec risque de collision
            */
        if (Pac.directionPac == Pac.GoDown) 
            numberExtremityPac = Pac.CenterPos.second + Pac.Size
            numberExtremityBP_Min = BP_Possible.first.second - BP.Size
            numberExtremityBP_Max = BP_Possible.first.second + BP.Size
            /* Explications :
            PacMan se dirige vers le haut donc la ligne de collision aura pour coordonnée y = PacCo y max (car fenetre haut=0 et bas=max) Soit la droite horizontale passant par le "point" le plus bas de PacMan. 
            Sachant que la vitesse est suceptible de changer durant une partie, on détermine qu'une collision a lieu lorsque le PointMax est dans l'intervalle compris entre les Y des PointMax et PointMin d'une BP de la map des BP avec risque de collision
            */
        if (Pac.directionPac == Pac.GoLeft) 
            numberExtremityPac = Pac.CenterPos.first - Pac.Size
            numberExtremityBP_Min = BP_Possible.first.first - BP.Size
            numberExtremityBP_Max = BP_Possible.first.first + BP.Size
            /* Explications :
            PacMan se dirige vers le haut donc la ligne de collision aura pour coordonnée x = PacCo x min (car fenetre haut=0 et bas=max) Soit la droite horizontale passant par le "point" le plus à gauche de PacMan. 
            Sachant que la vitesse est suceptible de changer durant une partie, on détermine qu'une collision a lieu lorsque le PointMax est dans l'intervalle compris entre les X des PointMax et PointMin d'une BP de la map des BP avec risque de collision
            */ 
        if (Pac.directionPac == Pac.GoRight) 
            numberExtremityPac = Pac.CenterPos.first + Pac.Size
            numberExtremityBP_Min = BP_Possible.first.first - BP.Size
            numberExtremityBP_Max = BP_Possible.first.first + BP.Size
            /* Explications :
            PacMan se dirige vers le haut donc la ligne de collision aura pour coordonnée x = PacCo x min (car fenetre haut=0 et bas=max) Soit la droite horizontale passant par le "point" le plus à droite de PacMan. 
            Sachant que la vitesse est suceptible de changer durant une partie, on détermine qu'une collision a lieu lorsque le PointMax est dans l'intervalle compris entre les X des PointMax et PointMin d'une BP de la map des BP avec risque de collision
            */
        
        if (collisionPacBP == true && BP_Possible.second == false)
            pair <bool, nsGraphics::Vec2D> resultCollision = {true, BP_Possible.first}
            return (resultCollision);
}

Après resultCollision renvoyé dans ActionMouvement, 
voir collision_verif_order.txt